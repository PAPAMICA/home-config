# Variables
substitutions:
  name: detect-marion
  friendly_name: Marion - Détecteur de présence

# Configuration principale
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  platformio_options:
    board_build.extra_flags:
      - "-DARDUINO_USB_CDC_ON_BOOT=0"  # Override, defaults to '-DARDUINO_USB_CDC_ON_BOOT=1'

# Configuration spécifique à ESP32
esp32:
  board: lolin_s2_mini
  framework:
    type: arduino


# W-Fi configuration
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 15min
 
# Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${name} Hotspot"
    password: !secret hotspot_password

captive_portal:

# Enable logging
logger:
  baud_rate: 0
  level: INFO
#  level: DEBUG
  
# Enable Home Assistant API
api:
  
ota:
  
web_server:
  port: 80
  
###########    SENSOR CONNECTION    ###############################################################################

uart:
  tx_pin: 18
  rx_pin: 33
  baud_rate: 256000
  id: uart_2
  parity: NONE
  stop_bits: 1

ld2410:
  - uart_id: uart_2

  #################################################################################################################


###########    SENSOR CONFIG    ###################################################################################

binary_sensor:
  - platform: ld2410
    has_target: #Présence
      name: Presence
    has_moving_target: #Cible mobile
      name: Moving Target
    has_still_target: #Cible immobile
      name: Still Target

# ESP Status
  - platform: status
    name: "${name} (Statut)" 

sensor:
  - platform: ld2410
    light: #intensité lumineuse
      name: light
    moving_distance: #distance cible en mouvement
      name : Moving Distance
    still_distance: #distance cible immobile
      name: Still Distance
    moving_energy: #quantité de mouvement
      name: Move Energy
    still_energy: #quantité d'immobilité ??
      name: Still Energy
    detection_distance: #distance de détection
      name: Detection Distance

  # Wi-Fi signal
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s
    unit_of_measurement: dB
    accuracy_decimals: 0
    force_update: false
    icon: mdi:wifi

  # Uptime
  - platform: uptime
    id: uptime_seconds
    name: "Uptime Sensor"
    update_interval: 60s
    unit_of_measurement: s
    accuracy_decimals: 0
    force_update: false
    icon: mdi:timer

number:
  - platform: ld2410
    timeout: #Temps pour passer le binary sensor Présence à faux
      name: timeout
    light_threshold: #Seuil de lumière
      name: light threshold
    max_move_distance_gate: #Distance de détection du mouvemenet 2-8
      name: max move distance gate
    max_still_distance_gate: #Distance de détection d'immobilité 2-8
      name: max still distance gate

###################################################################################################################


###########    ESP STATS    #######################################################################################
      
switch:
  # Restart button
  - platform: restart
    name: "${name} reboot"

text_sensor:
  # Uptime human readable
  - platform: template
    name: "${name} - Uptime"
    update_interval: 60s
    icon: mdi:clock-start
    lambda: |-
      int seconds = (id(uptime_seconds).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else {
        return { (String(seconds) +"s").c_str() };
      }
  # Expose ESPHome version as sensor.
  - platform: version
    name: "${name} - Version"
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: "${name} - IP"
    bssid:
      name: "${name} - BSSID"
      
###################################################################################################################    


